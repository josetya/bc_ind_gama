 MyToggleButtonsFormField<TempatTinggal>(
                    decoration: InputDecoration(
                      labelText: 'TempatTinggal',
                    ),
                    initialValue: _formResult.tempatTinggal,
                    items: TempatTinggal.values,
                    itemBuilder: (BuildContext context, TempatTinggal tempatTinggalItem) => Text(describeEnum(tempatTinggalItem)),
                    selectedItemBuilder: (BuildContext context, TempatTinggal tempatTinggalItem) => Text(describeEnum(tempatTinggalItem)),
                    validator: (tempatTinggal) => tempatTinggal == null ? 'TempatTinggal is required' : null,
                    onSaved: (tempatTinggal) {
                      _formResult.tempatTinggal = tempatTinggal;
                    },
                    borderRadius: BorderRadius.all(Radius.circular(5.0)),
                    focusNodes: tempatTinggalFocusNodes,
                    onChanged: (tempatTinggal) {
                      final tempatTinggalIndex = TempatTinggal.values.indexOf(tempatTinggal);
                      if (tempatTinggalIndex >= 0) {
                        FocusScope.of(context).unfocus();
                        FocusScope.of(context).requestFocus(tempatTinggalFocusNodes[tempatTinggalIndex]);
                      }
                    },
                  ),
              SizedBox(height: 8.0),
              //4. status pernikahan
              MyToggleButtonsFormField<StatusNikah>(
                decoration: InputDecoration(
                  labelText: 'Apakah Status pernikahan saudari ?',
                ),
                initialValue: _formResult.statusNikah,
                items: StatusNikah.values,
                itemBuilder:
                    (BuildContext context, StatusNikah statusNikahItem) =>
                        Text(describeEnum(statusNikahItem)),
                selectedItemBuilder:
                    (BuildContext context, StatusNikah statusNikahItem) =>
                        Text(describeEnum(statusNikahItem)),
                validator: (statusNikah) =>
                    statusNikah == null ? 'StatusNikah is required' : null,
                onSaved: (statusNikah) {
                  _formResult.statusNikah = statusNikah;
                },
                borderRadius: BorderRadius.all(Radius.circular(5.0)),
                focusNodes: statusNikahFocusNode,
                onChanged: (statusNikah) {
                  final statusNikahIndex =
                      StatusNikah.values.indexOf(statusNikah);
                  if (statusNikahIndex >= 0) {
                    FocusScope.of(context).unfocus();
                    FocusScope.of(context).requestFocus(
                      statusNikahFocusNode[statusNikahIndex]);
                  }
                },
              ),
              SizedBox(height: 8.0),
              // 5. riwayat keluarga
              MyToggleButtonsFormField<RiwayatKeluarga>(
                decoration: InputDecoration(
                  labelText: 'RiwayatKeluarga',
                ),
                initialValue: _formResult.riwayatKeluarga,
                items: RiwayatKeluarga.values,
                itemBuilder: (BuildContext context,
                        RiwayatKeluarga riwayatKeluargaItem) =>
                    Text(describeEnum(riwayatKeluargaItem)),
                selectedItemBuilder: (BuildContext context,
                        RiwayatKeluarga riwayatKeluargaItem) =>
                    Text(describeEnum(riwayatKeluargaItem)),
                validator: (riwayatKeluarga) => riwayatKeluarga == null
                    ? 'RiwayatKeluarga is required'
                    : null,
                onSaved: (riwayatKeluarga) {
                  _formResult.riwayatKeluarga = riwayatKeluarga;
                },
                borderRadius: BorderRadius.all(Radius.circular(5.0)),
                focusNodes: riwayatKeluargaFocusNodes,
                onChanged: (riwayatKeluarga) {
                  final riwayatKeluargaIndex =
                      RiwayatKeluarga.values.indexOf(riwayatKeluarga);
                  if (riwayatKeluargaIndex >= 0) {
                    FocusScope.of(context).unfocus();
                    FocusScope.of(context).requestFocus(
                        riwayatKeluargaFocusNodes[riwayatKeluargaIndex]);
                  }
                },
              ),